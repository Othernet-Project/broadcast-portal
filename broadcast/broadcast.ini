[server]

bind = 0.0.0.0
port = 8080
debug = yes

[app]

view_path = views
secret_key = not-secret
broadcast_types =
    content
    twitter
redirect_delay = 10

[bin]

# Maximum capacity of a single bin
capacity = 400MB

# Automatically close and start a new bin after it exceeds the specified lifetime (in seconds)
lifetime = 86400

# Interval of checking bin expiration in seconds
check_interval = 300

[charge]

# Currency used for charging priority broadcasts
currency = USD

# Multipler used to convert cents into desired currency unit
basic_monetary_unit_multiplier = 100

[content]

# Remove content items that have no user associated after specified no. of days
remove_orphans_after = 2

# Determines whether it can be broadcasted for free or not
allow_free = true

# Absolute path to folder where uploads are stored
upload_root = /var/lib/broadcast/upload

# List of extension that will be accepted as valid uploads
allowed_upload_extensions =
    zip

# File size limit of uploads
size_limit = 3MB

# Content links will be generated from this template (username will be injected)
url_template = http://broadcast.outernet.is/community/

# Price of priority broadcasts (in cents)
prices =
    review: 500

# Charge description template
description_template = 'Broadcast content of {hsize} over Outernet'

[twitter]

# Remove twitter items that have no user associated after specified no. of days
remove_orphans_after = 2

# Determines whether it can be broadcasted for free or not
allow_free = false

# List of plans that are subscriptions and not one-time charges
subscription_plans =
    bc_twitter_monthly
    bc_twitter_annual

# One-time and subscription prices (in cents)
prices =
    bc_twitter_monthly: 300
    bc_twitter_annual: 3000

# Charge description template
description_template = 'Broadcast twitter feed over Outernet using the {plan} plan'

[stack]

pre_init =
    broadcast.util.logconf.pre_init
    broadcast.util.bottleconf.pre_init
    broadcast.util.paths.pre_init
    broadcast.util.static.pre_init
    broadcast.util.squery.pre_init
    broadcast.util.migrations.pre_init
    broadcast.util.commands.pre_init
    broadcast.util.errors.pre_init
    broadcast.tasks.schedule_all

plugins =
    broadcast.util.squery.database_plugin
    broadcast.util.null_i18n.null_i18n_plugin
    broadcast.util.sessions.session_plugin
    broadcast.util.auth.plugins.user_plugin
    broadcast.util.static.assets_plugin

routes =
    broadcast.routes.main.route
    broadcast.routes.static.route
    broadcast.routes.auth.route
    broadcast.routes.api.route
    broadcast.routes.broadcast.route
    broadcast.routes.priority.route
    broadcast.routes.queue.route
    broadcast.routes.bins.route

background =

post_stop =
    broadcast.util.squery.post_stop

[mako]

module_directory = /var/lib/broadcast/.mako

[database]

# Names of all databases
names =
    main
    sessions

# Path to database directory
path = /var/lib/broadcast

# Module path prefix for migration modules
migration_prefix = broadcast.migrations

[logging]
# This section deals with logging section. Most of the settings are related to
# Python's logging module configuration. You may find documentation about
# relevant options here:
# https://docs.python.org/2/library/logging.config.html

# Log format
format = [%(asctime)s] %(levelname)-8s %(message)s

# Date and time formatting
date_format = %Y-%m-%d %H:%M:%S (%z)

# Maximum size of the log file
size = 10MB

# Number of backups to keep
backups = 4

# Output
output = /var/log/broadcast.log

# Syslog path
syslog = /var/log/syslog

[session]

cookie_name = sessions
secret_env_name = BROADCAST_SECRET
lifetime = 21
no_auth = False

[csrf]
# CSRF token cookie name
token_name = _csrf_token

# CSRF token cookie path
path = /

# CSRF token cookie max-age in seconds
expires = 600

# CSRF secret
secret = not-secret

[assets]

directory = static
url = /static/
debug = merge

js_bundles =
    ui : vendor/jquery, vendor/templates, vendor/widgets/forms, vendor/widgets/progress, vendor/widgets/menu
    broadcast: vendor/broadcast
    priority: vendor/input, vendor/check, vendor/priority
    accounts: vendor/input, vendor/lodash, vendor/accounts
    queue: queue

css_bundles =
    main : main

[authentication]

# Confirmation email expires in specified number of days
confirmation_expires = 14

# Password reset email expires in specified number of days
password_reset_expires = 14

[notifications]

# Interval of sending new uplink request notifications in seconds 
send_interval = 86400 

# List of admin email addresses who will receive notifications
recipients =

[google]

# Whether google drive integration is enabled
enabled = no

# path to file containing google service account credentials
service_credentials_path =

# id of folder where to upload files
parent_folder_id =

# id of spreadsheet where to write metadata
spreadsheet_id =

# index of worksheet within specified spreadsheet
worksheet_index =
